{"version":3,"sources":["all.min.js","_cn-forms.module.js","cn-forms.directive.js","cn-forms.routes.js","cn-forms.service.js","templates.js"],"names":["angular","module","cnForm","restrict","templateUrl","transclude","scope","config","model","controller","Form","controllerAs","bindToController","cnFormsService","$rootScope","$scope","$state","$stateParams","$timeout","$log","$location","$compile","cnFormTag","activate","watch","vm","activateOffscreen","cols","formCtrl","buttonContainerClass","isDisabled","schema","compiled","compile","page","pageIndex","getPageIndex","getPage","errors","$broadcast","renderedPages","_","reduce","forms","acc","value","index","set","eq","e","error","message","search","sandbox","schemaStr","toJson","btnConfig","isFormInvalid","saving","$invalid","allowPristine","$pristine","loadOffscreen","console","log","submit","form","handler","$emit","$valid","allowInvalid","each","validatePage","then","response","$setPristine","rejection","updatePage","key","go","current","name","noBadge","curForm","$error","chain","left","right","concat","uniq","reject","$name","length","onSandboxSchema","fromJson","__tag","this","cleanupEvent","formKey","$watch","$on","destroy","directive","$inject","cnFormsRoutesProvider","$stateProvider","cnFlexFormRoutesProvider","$get","addStates","options","pageParam","excludedPage","queryParams","join","state","abstract","url","baseUrl","resolve","permissions","params","reloadOnSearch","provider","service","update","i","l","formIndex","factory","run","$templateCache","put"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.forms', ['ui.router', 'cn.ui', 'cn.flex-form']);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.forms').directive('cnForm', cnForm);\n\n  function cnForm() {\n    return {\n      restrict: 'E',\n      templateUrl: 'cn-forms/templates/cn-forms.html',\n      transclude: true,\n      scope: {\n        config: '=ffConfig',\n        model: '=ffModel'\n      },\n      controller: Form,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n  }\n\n  Form.$inject = ['cnFormsService', '$rootScope', '$scope', '$state', '$stateParams', '$timeout', '$log', '$location', '$compile'];\n  function Form(cnFormsService, $rootScope, $scope, $state, $stateParams, $timeout, $log, $location, $compile) {\n    function cnFormTag() {}\n    $scope.__tag = new cnFormTag();\n\n    var vm = this;\n\n    vm.activate = activate;\n    vm.loadOffscreen = loadOffscreen;\n    vm.submit = submit;\n    vm.updatePage = updatePage;\n    vm.validatePage = validatePage;\n    vm.cleanupEvent = \"cn.forms.cleanup\";\n    vm.formKey = $stateParams.page;\n\n    // debug\n    vm.schemaStr = '';\n    vm.onSandboxSchema = onSandboxSchema;\n\n    $scope.$watch(function () {\n      return !!vm.config.schema;\n    }, vm.activate);\n\n    $scope.$on('$destroy', function () {\n      $scope.$broadcast(vm.cleanupEvent);\n      $scope.$emit(vm.cleanupEvent);\n      cnFormsService.destroy();\n    });\n\n    //////////\n\n    function activate(watch) {\n      vm.activateOffscreen = false;\n      vm.config.cols = 3;\n      vm.config.formCtrl = vm.cnForm;\n      vm.config.buttonContainerClass = \"page-action-btns\";\n      vm.config.isDisabled = isDisabled;\n\n      if (vm.config.schema) {\n        try {\n          vm.compiled = false;\n          cnFormsService.compile(vm.config.schema, $stateParams.page);\n          vm.pageIndex = cnFormsService.getPageIndex();\n          vm.page = cnFormsService.getPage();\n\n          vm.compiled = true;\n\n          if (vm.page.errors) {\n            vm.page.errors = 0;\n            $timeout(function () {\n              $scope.$broadcast('schemaFormValidate');\n            });\n          }\n\n          vm.renderedPages = _.reduce(vm.config.schema.forms, function (acc, value, index) {\n            return _.set(acc, index, _.eq(vm.pageIndex, index));\n          }, {});\n        } catch (e) {\n          $log.error('There was an error with your form data:', e.message);\n        }\n      }\n\n      // sandbox\n      if ($location.search().sandbox) {\n        vm.schemaStr = angular.toJson(vm.config.schema);\n        vm.sandbox = true;\n      }\n    }\n\n    function isDisabled(btnConfig) {\n      return btnConfig.isDisabled ? btnConfig.isDisabled(isFormInvalid) : isFormInvalid(btnConfig);\n    }\n\n    function isFormInvalid(btnConfig) {\n      return vm.saving || vm.cnForm.$invalid || (!(btnConfig && btnConfig.allowPristine) || !vm.activateOffscreen) && vm.cnForm.$pristine;\n    }\n\n    function loadOffscreen() {\n      console.log('vm.activateOffscreen:', vm.activateOffscreen);\n      vm.activateOffscreen = true;\n    }\n\n    function submit(form, handler) {\n      console.log('submit:');\n      vm.loadOffscreen();\n\n      $scope.$broadcast('schemaFormValidate');\n      $scope.$emit('schemaFormValidate');\n\n      if ((form.$valid || vm.config.allowInvalid) && !vm.saving) {\n        vm.saving = true;\n        handler(vm.model).then(function (response) {\n          console.log('submit:response:', response);\n          vm.config.formCtrl.$setPristine();\n          vm.saving = false;\n        }, function (rejection) {\n          vm.saving = false;\n        });\n      } else {\n        _.each(vm.config.schema.forms, function (page) {\n          vm.validatePage(page, page === vm.page);\n        });\n      }\n    }\n\n    function updatePage(page, pageIndex) {\n      $scope.$broadcast('schemaFormValidate');\n\n      vm.validatePage(vm.page.key);\n\n      $stateParams.page = page.key;\n      $state.go($state.current.name, $stateParams);\n      vm.page = page;\n      vm.pageIndex = pageIndex;\n      vm.renderedPages[pageIndex] = true;\n\n      $scope.$emit('flexForm.updatePage', page.key);\n      $scope.$broadcast('flexForm.updatePage', page.key);\n    }\n\n    function validatePage(page, noBadge) {\n      var curForm = vm.config.formCtrl[page.key];\n      if (curForm) {\n        console.error('curForm.$error:', curForm.$error);\n\n        var errors = _.chain(curForm.$error).reduce(function (left, right) {\n          return left.concat(right);\n        }).uniq('$name').reject({ $name: '' }).value();\n\n        if (errors && errors.length) {\n          page.errors = !noBadge && errors.length;\n        } else {\n          page.errors = 0;\n        }\n      }\n    }\n\n    // debug\n\n    function onSandboxSchema() {\n      if (vm.schemaStr) {\n        vm.config.schema = angular.fromJson(vm.schemaStr);\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.forms').provider('cnFormsRoutes', cnFormsRoutesProvider);\n\n  cnFormsRoutesProvider.$inject = ['$stateProvider', 'cnFlexFormRoutesProvider'];\n  function cnFormsRoutesProvider($stateProvider, cnFlexFormRoutesProvider) {\n    var provider = {\n      addStates: addStates,\n      $get: $get\n    };\n\n    return provider;\n\n    ////////////\n\n    function $get() {\n      // nothing to do here, but required\n    }\n\n    function addStates(options) {\n      var pageParam = options.excludedPage ? '{page:(?!' + options.excludedPage + ')[^/]*}' : ':page';\n      var queryParams = ['debug', 'sandbox'].concat(options.queryParams || []).join('&');\n      $stateProvider.state(options.name, {\n        abstract: true,\n        url: options.baseUrl + '?' + queryParams,\n        controller: options.controller,\n        controllerAs: 'vm',\n        resolve: options.resolve,\n        permissions: options.permissions,\n        params: options.params,\n        templateUrl: options.templateUrl,\n        reloadOnSearch: false\n      }).state(options.name + '.page', {\n        url: '/' + pageParam,\n        permissions: options.permissions\n      });\n\n      cnFlexFormRoutesProvider.addStates(options);\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.forms').factory('cnFormsService', cnFormsService);\n\n  function cnFormsService() {\n    var service = {\n      compile: compile,\n      getPage: getPage,\n      getPageIndex: getPageIndex,\n      update: update,\n      destroy: destroy\n    };\n\n    return service;\n\n    //////////////\n\n    function compile(schema, page) {\n      service.schema = schema;\n      update(page);\n    }\n\n    function update(page) {\n      if (service.schema.forms) {\n        for (var i = 0, l = service.schema.forms.length; i < l; i++) {\n          var form = service.schema.forms[i];\n          if (page === form.key) {\n            service.form = form;\n            service.formIndex = i;\n            break;\n          }\n        }\n      } else {\n        service.form = service.schema.form;\n      }\n    }\n\n    function getPage() {\n      return service.form;\n    }\n\n    function getPageIndex() {\n      return service.formIndex;\n    }\n\n    function destroy() {\n      service.form = null;\n      service.schema = null;\n      service.formIndex = null;\n    }\n  }\n})();\n\"use strict\";\n\nangular.module(\"cn.forms\").run([\"$templateCache\", function ($templateCache) {\n  $templateCache.put(\"cn-forms/templates/cn-forms.html\", \"<form name=\\\"vm.cnForm\\\">\\n  <section class=\\\"cn-form-head cn-heading row vertical-parent\\\">\\n    <div class=\\\"container-fluid max-width\\\">\\n      <cn-flex-form-header ff-header-config=\\\"vm.config\\\"\\n                           ff-submit=\\\"vm.submit(vm.cnForm, handler)\\\"\\n                           ff-load-offscreen=\\\"vm.loadOffscreen()\\\">\\n      </cn-flex-form-header>\\n    </div>\\n  </section>\\n  <div class=\\\"cn-form cn-form-cols-3\\\"\\n       cn-responsive-height\\n       cn-responsive-break=\\\"sm\\\">\\n    <div class=\\\"cn-form-inner\\\">\\n\\n      <div class=\\\"col-sm-2 cn-form-nav\\\" ng-if=\\\"vm.config.schema.forms\\\">\\n        <div class=\\\"cn-form-nav-inner\\\"\\n             cn-parent-width\\n             cn-responsive-height\\n             cn-responsive-break=\\\"sm\\\">\\n          <ul class=\\\"nav nav-pills nav-stacked\\\">\\n            <li class=\\\"{{page.key === vm.page.key ? \\'active\\' : \\'\\'}}\\\"\\n                ng-repeat=\\\"page in vm.config.schema.forms\\\">\\n              <a ng-click=\\\"vm.updatePage(page, $index)\\\">\\n                {{page.title || page.key | titleCase}}\\n                <span class=\\\"badge has-error\\\" ng-show=\\\"page.errors\\\">{{page.errors}}</span>\\n              </a>\\n            </li>\\n          </ul>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"cn-form-body col-sm-6\\\">\\n        <div class=\\\"{{$index !== vm.pageIndex ? \\'offscreen\\' : \\'\\'}}\\\"\\n             ng-if=\\\"vm.config.schema.forms\\\"\\n             ng-repeat=\\\"form in vm.config.schema.forms\\\">\\n          <cn-flex-form\\n            ff-form-index=\\\"$index\\\"\\n            ff-form-name=\\\"form.key\\\"\\n            ff-config=\\\"vm.config\\\"\\n            ff-model=\\\"vm.model\\\"\\n            ff-delay-form=\\\"!vm.renderedPages[$index] && !vm.activateOffscreen\\\"\\n            ff-cleanup-event=\\\"vm.cleanupEvent\\\">\\n          </cn-flex-form>\\n        </div>\\n\\n        <cn-flex-form\\n          ng-if=\\\"!vm.config.schema.forms\\\"\\n          ff-form-index=\\\"$index\\\"\\n          ff-form-name=\\\"vm.formKey\\\"\\n          ff-config=\\\"vm.config\\\"\\n          ff-model=\\\"vm.model\\\"\\n          ff-cleanup-event=\\\"vm.cleanupEvent\\\">\\n        </cn-flex-form>\\n\\n        <!-- sandbox for debug mode -->\\n        <fieldset ng-if=\\\"vm.sandbox\\\">\\n          <legend>Sandbox</legend>\\n\\n          <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" for=\\\"schema\\\">Form Data</label>\\n            <textarea id=\\\"schema\\\"\\n                      class=\\\"form-control\\\"\\n                      ng-model=\\\"vm.schemaStr\\\"\\n                      rows=\\\"14\\\">\\n            </textarea>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <button class=\\\"btn btn-primary\\\"\\n                    ng-click=\\\"vm.onSandboxSchema()\\\">Update Form\\n            </button>\\n          </div>\\n        </fieldset>\\n        <!-- end sandbox -->\\n      </div>\\n\\n      <div class=\\\"cn-form-meta\\\" ng-class=\\\"{\\'col-sm-4\\': vm.config.schema.forms, \\'col-sm-6\\': !vm.config.schema.forms}\\\">\\n        <div class=\\\"cn-form-meta-inner\\\"\\n             cn-parent-width\\n             cn-responsive-height\\n             cn-responsive-break=\\\"sm\\\"\\n             cn-set-max-height=\\\"true\\\">\\n          <div ng-bind-html=\\\"vm.config.schema.meta\\\"/>\\n          <div ng-transclude/>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</form>\\n<ui-view></ui-view>\\n\");\n}]);","(function() {\n  'use strict';\n  angular.module('cn.forms', ['ui.router', 'cn.ui', 'cn.flex-form']);\n})();","(function() {\n  'use strict';\n\n  angular\n    .module('cn.forms')\n    .directive('cnForm', cnForm);\n\n  function cnForm() {\n    return {\n      restrict: 'E',\n      templateUrl: 'cn-forms/templates/cn-forms.html',\n      transclude: true,\n      scope: {\n        config: '=ffConfig',\n        model: '=ffModel'\n      },\n      controller: Form,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n  }\n\n  Form.$inject = [\n    'cnFormsService', '$rootScope', '$scope', '$state',\n    '$stateParams', '$timeout', '$log', '$location', '$compile'\n  ];\n  function Form(cnFormsService, $rootScope, $scope, $state,\n                $stateParams, $timeout, $log, $location, $compile) {\n    function cnFormTag() {}\n    $scope.__tag = new cnFormTag();\n\n    var vm = this;\n\n    vm.activate = activate;\n    vm.loadOffscreen = loadOffscreen;\n    vm.submit = submit;\n    vm.updatePage = updatePage;\n    vm.validatePage = validatePage;\n    vm.cleanupEvent = \"cn.forms.cleanup\";\n    vm.formKey = $stateParams.page;\n\n    // debug\n    vm.schemaStr = '';\n    vm.onSandboxSchema = onSandboxSchema;\n\n    $scope.$watch(function() {\n      return !!vm.config.schema;\n    }, vm.activate);\n\n    $scope.$on('$destroy', function() {\n      $scope.$broadcast(vm.cleanupEvent);\n      $scope.$emit(vm.cleanupEvent);\n      cnFormsService.destroy();\n    });\n\n    //////////\n\n    function activate(watch) {\n      vm.activateOffscreen = false;\n      vm.config.cols = 3;\n      vm.config.formCtrl = vm.cnForm;\n      vm.config.buttonContainerClass = \"page-action-btns\";\n      vm.config.isDisabled = isDisabled;\n\n      if(vm.config.schema) {\n        try {\n          vm.compiled = false;\n          cnFormsService.compile(vm.config.schema, $stateParams.page);\n          vm.pageIndex = cnFormsService.getPageIndex();\n          vm.page = cnFormsService.getPage();\n\n          vm.compiled = true;\n\n          if(vm.page.errors) {\n            vm.page.errors = 0;\n            $timeout(function() {\n              $scope.$broadcast('schemaFormValidate');\n            });\n          }\n\n          vm.renderedPages = _.reduce(\n            vm.config.schema.forms,\n            (acc, value, index) => _.set(acc, index, _.eq(vm.pageIndex, index)),\n            {}\n          );\n        }\n        catch(e) {\n          $log.error('There was an error with your form data:', e.message);\n        }\n      }\n\n      // sandbox\n      if($location.search().sandbox) {\n        vm.schemaStr = angular.toJson(vm.config.schema);\n        vm.sandbox = true;\n      }\n    }\n\n     function isDisabled(btnConfig) {\n      return btnConfig.isDisabled ? btnConfig.isDisabled(isFormInvalid) : isFormInvalid(btnConfig);\n    }\n\n    function isFormInvalid(btnConfig) {\n      return vm.saving || vm.cnForm.$invalid || ((!(btnConfig && btnConfig.allowPristine) || !vm.activateOffscreen) && vm.cnForm.$pristine);\n    }\n\n    function loadOffscreen() {\n      console.log('vm.activateOffscreen:', vm.activateOffscreen);\n      vm.activateOffscreen = true;\n    }\n\n    function submit(form, handler) {\n      console.log('submit:');\n      vm.loadOffscreen();\n\n      $scope.$broadcast('schemaFormValidate');\n      $scope.$emit('schemaFormValidate');\n\n      if((form.$valid || vm.config.allowInvalid) && !vm.saving) {\n        vm.saving = true;\n        handler(vm.model)\n            .then(function(response) {\n              console.log('submit:response:', response);\n              vm.config.formCtrl.$setPristine();\n              vm.saving = false;\n            }, function(rejection) {\n              vm.saving = false;\n            });\n      }\n      else {\n        _.each(vm.config.schema.forms, function(page) {\n          vm.validatePage(page, page === vm.page);\n        });\n      }\n    }\n\n    function updatePage(page, pageIndex) {\n      $scope.$broadcast('schemaFormValidate');\n\n      vm.validatePage(vm.page.key);\n\n      $stateParams.page = page.key;\n      $state.go($state.current.name, $stateParams);\n      vm.page = page;\n      vm.pageIndex = pageIndex;\n      vm.renderedPages[pageIndex] = true;\n\n      $scope.$emit('flexForm.updatePage', page.key);\n      $scope.$broadcast('flexForm.updatePage', page.key);\n    }\n\n    function validatePage(page, noBadge) {\n      var curForm = vm.config.formCtrl[page.key];\n      if(curForm) {\n        console.error('curForm.$error:', curForm.$error);\n\n        var errors = _.chain(curForm.$error)\n            .reduce(function(left, right) {\n              return left.concat(right);\n            })\n            .uniq('$name')\n            .reject({$name: ''})\n            .value();\n\n        if(errors && errors.length) {\n          page.errors = !noBadge && errors.length;\n        }\n        else {\n          page.errors = 0;\n        }\n      }\n    }\n\n    // debug\n\n    function onSandboxSchema() {\n      if(vm.schemaStr) {\n        vm.config.schema = angular.fromJson(vm.schemaStr);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n  angular\n      .module('cn.forms')\n      .provider('cnFormsRoutes', cnFormsRoutesProvider);\n\n  cnFormsRoutesProvider.$inject = ['$stateProvider', 'cnFlexFormRoutesProvider'];\n  function cnFormsRoutesProvider($stateProvider, cnFlexFormRoutesProvider) {\n    var provider = {\n      addStates: addStates,\n      $get: $get\n    };\n\n    return provider;\n\n    ////////////\n\n    function $get() {\n      // nothing to do here, but required\n    }\n\n    function addStates(options) {\n      let pageParam = options.excludedPage ? `{page:(?!${options.excludedPage})[^/]*}` : ':page';\n      let queryParams = ['debug', 'sandbox'].concat(options.queryParams || []).join('&');\n      $stateProvider\n          .state(options.name, {\n            abstract: true,\n            url: `${options.baseUrl}?${queryParams}`,\n            controller: options.controller,\n            controllerAs: 'vm',\n            resolve: options.resolve,\n            permissions: options.permissions,\n            params: options.params,\n            templateUrl: options.templateUrl,\n            reloadOnSearch: false\n          })\n          .state(options.name + '.page', {\n            url: `/${pageParam}`,\n            permissions: options.permissions\n          });\n\n      cnFlexFormRoutesProvider.addStates(options);\n    }\n  }\n\n})();\n","(function() {\n  'use strict';\n  angular\n      .module('cn.forms')\n      .factory('cnFormsService', cnFormsService);\n\n  function cnFormsService() {\n    var service = {\n      compile: compile,\n      getPage: getPage,\n      getPageIndex: getPageIndex,\n      update: update,\n      destroy: destroy\n    };\n\n    return service;\n\n    //////////////\n\n    function compile(schema, page) {\n      service.schema = schema;\n      update(page);\n    }\n\n    function update(page) {\n      if (service.schema.forms) {\n        for(var i = 0, l = service.schema.forms.length; i < l; i++) {\n          var form = service.schema.forms[i];\n          if(page === form.key) {\n            service.form = form;\n            service.formIndex = i;\n            break;\n          }\n        }\n      }\n      else {\n        service.form = service.schema.form;\n      }\n    }\n\n    function getPage() {\n      return service.form;\n    }\n\n    function getPageIndex() {\n      return service.formIndex;\n    }\n\n    function destroy() {\n      service.form = null;\n      service.schema = null;\n      service.formIndex = null;\n    }\n  }\n})();\n","angular.module(\"cn.forms\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"cn-forms/templates/cn-forms.html\",\"<form name=\\\"vm.cnForm\\\">\\n  <section class=\\\"cn-form-head cn-heading row vertical-parent\\\">\\n    <div class=\\\"container-fluid max-width\\\">\\n      <cn-flex-form-header ff-header-config=\\\"vm.config\\\"\\n                           ff-submit=\\\"vm.submit(vm.cnForm, handler)\\\"\\n                           ff-load-offscreen=\\\"vm.loadOffscreen()\\\">\\n      </cn-flex-form-header>\\n    </div>\\n  </section>\\n  <div class=\\\"cn-form cn-form-cols-3\\\"\\n       cn-responsive-height\\n       cn-responsive-break=\\\"sm\\\">\\n    <div class=\\\"cn-form-inner\\\">\\n\\n      <div class=\\\"col-sm-2 cn-form-nav\\\" ng-if=\\\"vm.config.schema.forms\\\">\\n        <div class=\\\"cn-form-nav-inner\\\"\\n             cn-parent-width\\n             cn-responsive-height\\n             cn-responsive-break=\\\"sm\\\">\\n          <ul class=\\\"nav nav-pills nav-stacked\\\">\\n            <li class=\\\"{{page.key === vm.page.key ? \\'active\\' : \\'\\'}}\\\"\\n                ng-repeat=\\\"page in vm.config.schema.forms\\\">\\n              <a ng-click=\\\"vm.updatePage(page, $index)\\\">\\n                {{page.title || page.key | titleCase}}\\n                <span class=\\\"badge has-error\\\" ng-show=\\\"page.errors\\\">{{page.errors}}</span>\\n              </a>\\n            </li>\\n          </ul>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"cn-form-body col-sm-6\\\">\\n        <div class=\\\"{{$index !== vm.pageIndex ? \\'offscreen\\' : \\'\\'}}\\\"\\n             ng-if=\\\"vm.config.schema.forms\\\"\\n             ng-repeat=\\\"form in vm.config.schema.forms\\\">\\n          <cn-flex-form\\n            ff-form-index=\\\"$index\\\"\\n            ff-form-name=\\\"form.key\\\"\\n            ff-config=\\\"vm.config\\\"\\n            ff-model=\\\"vm.model\\\"\\n            ff-delay-form=\\\"!vm.renderedPages[$index] && !vm.activateOffscreen\\\"\\n            ff-cleanup-event=\\\"vm.cleanupEvent\\\">\\n          </cn-flex-form>\\n        </div>\\n\\n        <cn-flex-form\\n          ng-if=\\\"!vm.config.schema.forms\\\"\\n          ff-form-index=\\\"$index\\\"\\n          ff-form-name=\\\"vm.formKey\\\"\\n          ff-config=\\\"vm.config\\\"\\n          ff-model=\\\"vm.model\\\"\\n          ff-cleanup-event=\\\"vm.cleanupEvent\\\">\\n        </cn-flex-form>\\n\\n        <!-- sandbox for debug mode -->\\n        <fieldset ng-if=\\\"vm.sandbox\\\">\\n          <legend>Sandbox</legend>\\n\\n          <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" for=\\\"schema\\\">Form Data</label>\\n            <textarea id=\\\"schema\\\"\\n                      class=\\\"form-control\\\"\\n                      ng-model=\\\"vm.schemaStr\\\"\\n                      rows=\\\"14\\\">\\n            </textarea>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <button class=\\\"btn btn-primary\\\"\\n                    ng-click=\\\"vm.onSandboxSchema()\\\">Update Form\\n            </button>\\n          </div>\\n        </fieldset>\\n        <!-- end sandbox -->\\n      </div>\\n\\n      <div class=\\\"cn-form-meta\\\" ng-class=\\\"{\\'col-sm-4\\': vm.config.schema.forms, \\'col-sm-6\\': !vm.config.schema.forms}\\\">\\n        <div class=\\\"cn-form-meta-inner\\\"\\n             cn-parent-width\\n             cn-responsive-height\\n             cn-responsive-break=\\\"sm\\\"\\n             cn-set-max-height=\\\"true\\\">\\n          <div ng-bind-html=\\\"vm.config.schema.meta\\\"/>\\n          <div ng-transclude/>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</form>\\n<ui-view></ui-view>\\n\");}]);"]}